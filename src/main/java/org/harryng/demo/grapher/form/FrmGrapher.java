/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmGrapher.java
 *
 * Created on Dec 5, 2011, 2:17:05 PM
 */
package org.harryng.demo.grapher.form;

import org.harryng.demo.grapher.model.FunctionInfo;
import org.harryng.demo.grapher.proccessor.Plotter;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.image.BufferedImage;
import java.util.List;

/**
 *
 * @author hiep
 */
public class FrmGrapher extends javax.swing.JFrame {

    protected Plotter drawer = new Plotter();
    public List<FunctionInfo> lsFunc = null;//new ArrayList<FunctionInfo>();
    protected Point lastPoint = new Point(0, 0);
    protected Point lastCenterVector = new Point(0, 0);
    Image img = null;

    /** Creates new form FrmGrapher */
    public FrmGrapher() {
        initComponents();
        init();
    }

    protected void reDrawGraph(Point center) {
        if (lsFunc != null) {
            boolean isFirst = true;
            drawer.setAntiAliasing(chkAntiAliasing.getModel().isSelected());
            for (FunctionInfo funcInf : lsFunc) {
                if (funcInf.isDrawed()) {
                    if (isFirst) {
                        img = drawer.drawFunctionGraph(funcInf.getFunctionContent(),
                                pnlContent.getWidth(), pnlContent.getHeight(), center,
                                Integer.valueOf(spBarDevide.getValue().toString()), funcInf.getColor());
                        isFirst = false;
                    } else {
                        img = drawer.drawFunctionGraph((BufferedImage) img, funcInf.getFunctionContent(),
                                pnlContent.getWidth(), pnlContent.getHeight(), center,
                                Integer.valueOf(spBarDevide.getValue().toString()), funcInf.getColor());
                    }
                }
            }
            if (img != null) {
                lbGraph.setIcon(new ImageIcon(img));
            }
        }
    }

    protected void init() {
        SpinnerNumberModel spBarDevideModel = new SpinnerNumberModel(20, 2, 1000, 2);
        spBarDevide.setModel(spBarDevideModel);
        setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTop = new javax.swing.JPanel();
        btnDraw = new javax.swing.JButton();
        spBarDevide = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        chkAntiAliasing = new javax.swing.JCheckBox();
        pnlContent = new javax.swing.JPanel();
        pnlContentScroller = new javax.swing.JScrollPane();
        lbGraph = new javax.swing.JLabel();
        pnlFooter = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Function Grapher - Hiá»‡p NQ");
        setMinimumSize(new java.awt.Dimension(800, 600));

        pnlTop.setPreferredSize(new java.awt.Dimension(801, 50));

        btnDraw.setText("Functions");
        btnDraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrawActionPerformed(evt);
            }
        });

        spBarDevide.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spBarDevideStateChanged(evt);
            }
        });

        jLabel1.setText("Bar Devide");

        chkAntiAliasing.setSelected(true);
        chkAntiAliasing.setText("Anti-aliasing");
        chkAntiAliasing.setNextFocusableComponent(lbGraph);
        chkAntiAliasing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAntiAliasingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTopLayout = new javax.swing.GroupLayout(pnlTop);
        pnlTop.setLayout(pnlTopLayout);
        pnlTopLayout.setHorizontalGroup(
            pnlTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTopLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnDraw)
                .addGap(405, 405, 405)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spBarDevide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkAntiAliasing)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        pnlTopLayout.setVerticalGroup(
            pnlTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDraw)
                    .addComponent(jLabel1)
                    .addComponent(spBarDevide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkAntiAliasing))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pnlTop, java.awt.BorderLayout.NORTH);

        pnlContent.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                pnlContentComponentResized(evt);
            }
        });
        pnlContent.setLayout(new java.awt.BorderLayout());

        pnlContentScroller.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        pnlContentScroller.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        pnlContentScroller.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbGraph.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(MouseWheelEvent evt) {
                lbGraphMouseWheelMoved(evt);
            }
        });
        lbGraph.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                lbGraphMousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                lbGraphMouseReleased(evt);
            }
        });
        lbGraph.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(MouseEvent evt) {
                lbGraphMouseDragged(evt);
            }
        });
        lbGraph.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                lbGraphKeyPressed(evt);
            }
            public void keyReleased(KeyEvent evt) {
                lbGraphKeyReleased(evt);
            }
        });
        pnlContentScroller.setViewportView(lbGraph);

        pnlContent.add(pnlContentScroller, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlContent, java.awt.BorderLayout.CENTER);

        pnlFooter.setPreferredSize(new java.awt.Dimension(800, 40));

        javax.swing.GroupLayout pnlFooterLayout = new javax.swing.GroupLayout(pnlFooter);
        pnlFooter.setLayout(pnlFooterLayout);
        pnlFooterLayout.setHorizontalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 801, Short.MAX_VALUE)
        );
        pnlFooterLayout.setVerticalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        getContentPane().add(pnlFooter, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrawActionPerformed
        FrmFunctionInputDialog func = new FrmFunctionInputDialog(this, lsFunc);
        func.setVisible(true);
        lsFunc = func.getFunctions();
//        img= drawer.drawFunctionGraph("",
//                            pnlContent.getWidth(), pnlContent.getHeight(), new Point(0, 0),
//                            Integer.valueOf(spBarDevide.getValue().toString()), Color.BLACK);
        reDrawGraph(new Point(0, 0));
        lastCenterVector.setLocation(0, 0);
        lastPoint.setLocation(0, 0);
//        
//        Color color = Color.RED;
//        img = drawer.drawFunctionGraph(txtFunctionContent.getText(),
//                pnlContent.getWidth(), pnlContent.getHeight(), new Point(0, 0),
//                Integer.valueOf(spBarDevide.getValue().toString()), color);

//        img = drawer.drawFunctionGraph((BufferedImage)img ,txtFunctionContent.getText() + "- 2",
//                pnlContent.getWidth(), pnlContent.getHeight(),
//                Integer.valueOf(spBarDevide.getValue().toString()));
//        lbGraph.setIcon(new ImageIcon(img));
//        lastCenterVector.setLocation(0, 0);
//        lastPoint.setLocation(0, 0);
//        JScrollBar verticalScrollBar = pnlContentScroller.getVerticalScrollBar();
//        JScrollBar horizontalScrollBar = pnlContentScroller.getHorizontalScrollBar();
//        verticalScrollBar.setValue(
//                (verticalScrollBar.getMinimum() + verticalScrollBar.getMaximum()) / 2);
//        horizontalScrollBar.setValue(
//                (horizontalScrollBar.getMinimum() + horizontalScrollBar.getMaximum()) / 2);

    }//GEN-LAST:event_btnDrawActionPerformed

    private void spBarDevideStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spBarDevideStateChanged
        reDrawGraph(new Point((int) lastCenterVector.getX(), (int) lastCenterVector.getY()));
//        lastCenterVector.setLocation(0, 0);
//        lastPoint.setLocation(0, 0);
    }//GEN-LAST:event_spBarDevideStateChanged

    private void chkAntiAliasingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAntiAliasingActionPerformed
        reDrawGraph(new Point(0, 0));
        lastCenterVector.setLocation(0, 0);
        lastPoint.setLocation(0, 0);
    }//GEN-LAST:event_chkAntiAliasingActionPerformed

    private void pnlContentComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlContentComponentResized
        reDrawGraph(new Point((int) lastCenterVector.getX(), (int) lastCenterVector.getY()));
        //lastCenterVector.setLocation(0, 0);
        //lastPoint.setLocation(0, 0);
    }//GEN-LAST:event_pnlContentComponentResized

    private void lbGraphMouseDragged(MouseEvent evt) {//GEN-FIRST:event_lbGraphMouseDragged

        if (evt.getButton() == MouseEvent.NOBUTTON) {
            Color color = Color.RED;
            Point newPoint = new Point((int) (evt.getX() - lastPoint.getX()),
                    (int) (evt.getY() - lastPoint.getY()));

            Point p = new Point((int) (newPoint.getX() + lastCenterVector.getX()),
                    (int) (newPoint.getY() + lastCenterVector.getY()));
//            img = drawer.drawFunctionGraph(txtFunctionContent.getText(),
//                    pnlContent.getWidth(), pnlContent.getHeight(), p,
//                    Integer.valueOf(spBarDevide.getValue().toString()), color);
            reDrawGraph(p);
            lbGraph.setIcon(new ImageIcon(img));
        }
    }//GEN-LAST:event_lbGraphMouseDragged

    private void lbGraphMouseWheelMoved(MouseWheelEvent evt) {//GEN-FIRST:event_lbGraphMouseWheelMoved
        if (evt.getScrollType() == MouseWheelEvent.WHEEL_UNIT_SCROLL) {
            SpinnerNumberModel spinModel = (SpinnerNumberModel) spBarDevide.getModel();
//            Integer totalScrollAmount =
//                    (Integer) spinModel.getValue() + 2 * Math.abs(evt.getUnitsToScroll()) / evt.getUnitsToScroll();
            Integer totalScrollAmount = (Integer) spinModel.getValue() + 2 * Integer.signum(evt.getUnitsToScroll());
            if ((Integer)spinModel.getMinimum() <= totalScrollAmount
                    && totalScrollAmount <= (Integer)spinModel.getMaximum()) {
                spinModel.setValue(totalScrollAmount);
            }
        }
    }//GEN-LAST:event_lbGraphMouseWheelMoved

    private void lbGraphMousePressed(MouseEvent evt) {//GEN-FIRST:event_lbGraphMousePressed
        lastPoint.setLocation(evt.getX(), evt.getY());
        lbGraph.requestFocusInWindow();
        lbGraph.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
    }//GEN-LAST:event_lbGraphMousePressed

    private void lbGraphMouseReleased(MouseEvent evt) {//GEN-FIRST:event_lbGraphMouseReleased

        Point curVect = new Point((int) (evt.getX() - lastPoint.getX()),
                (int) (evt.getY() - lastPoint.getY()));
        lastCenterVector.setLocation(lastCenterVector.getX() + curVect.getX(),
                lastCenterVector.getY() + curVect.getY());
        lbGraph.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_lbGraphMouseReleased

    private void lbGraphKeyPressed(KeyEvent evt) {//GEN-FIRST:event_lbGraphKeyPressed
        int coefficient = 10;
        if (evt.isControlDown()) {
            coefficient = 2 * 10;
        }
        int x = (int) lastPoint.getX();
        int y = (int) lastPoint.getY();
        MouseEvent event = null;
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            event = new MouseEvent(evt.getComponent(),
                    evt.getID(), evt.getWhen(), evt.getModifiers(),
                    x + coefficient, y, 1, false);
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            event = new MouseEvent(evt.getComponent(),
                    evt.getID(), evt.getWhen(), evt.getModifiers(),
                    x - coefficient, y, 1, false);
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            event = new MouseEvent(evt.getComponent(),
                    evt.getID(), evt.getWhen(), evt.getModifiers(),
                    x, y + coefficient, 1, false);
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            event = new MouseEvent(evt.getComponent(),
                    evt.getID(), evt.getWhen(), evt.getModifiers(),
                    x, y - coefficient, 1, false);
        }
        if (event != null) {
            lbGraphMouseDragged(event);
            lbGraphMouseReleased(event);
        }
    }//GEN-LAST:event_lbGraphKeyPressed

    private void lbGraphKeyReleased(KeyEvent evt) {//GEN-FIRST:event_lbGraphKeyReleased
//        MouseEvent event = new MouseEvent(evt.getComponent(),
//                evt.getID(), evt.getWhen(), evt.getModifiers(),
//                x - coefficient, y, 1, false);
    }//GEN-LAST:event_lbGraphKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmGrapher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmGrapher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmGrapher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmGrapher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FrmGrapher().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton btnDraw;
    protected javax.swing.JCheckBox chkAntiAliasing;
    protected javax.swing.JLabel jLabel1;
    protected javax.swing.JLabel lbGraph;
    protected javax.swing.JPanel pnlContent;
    protected javax.swing.JScrollPane pnlContentScroller;
    protected javax.swing.JPanel pnlFooter;
    protected javax.swing.JPanel pnlTop;
    protected javax.swing.JSpinner spBarDevide;
    // End of variables declaration//GEN-END:variables
}
